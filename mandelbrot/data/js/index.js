// Generated by CoffeeScript 1.6.3
(function() {
  var callback, callback_redraw, canvas, canvas_over, color_custom, color_custom_table, color_grayscale, color_grayscale_inv, color_hsv, color_init_custom, colorpallet_circle, colorpallet_circle_ctx, colorpallet_click, colorpallet_ctx, colorpallet_dbclick, colorpallet_draw_gradiate, colorpallet_draw_point, colorpallet_draw_triangle, colorpallet_gradiate, colorpallet_gradiate_click, colorpallet_gradiate_ctx, colorpallet_gradiate_data, colorpallet_gradiate_drag, colorpallet_gradiate_editing, colorpallet_gradiate_init_click, colorpallet_gradiate_on, colorpallet_gradiate_selected, colorpallet_h, colorpallet_init, colorpallet_init_circle, colorpallet_init_click, colorpallet_init_gradiate, colorpallet_message, colorpallet_mouse, colorpallet_mouse_mode, colorpallet_point, colorpallet_point_ctx, colorpallet_r, colorpallet_s, colorpallet_triangle, colorpallet_triangle_ctx, colorpallet_v, crop, ctx, ctx_over, defo, do_color, do_set, dx, dy, gen_jobs, gen_workers, get_color, hsv_to_rgb, img_data, init_buttom, init_color, init_mouse, init_set, init_slidebar, initialize, is_running, jobs, jobs_complete, maxrad, maxtry, mem_canvas, mem_ctx, message, mouse_x, mouse_y, move_box, reflesh, rgb_to_hsv, settype, start, start_jobs, stop, time_end, time_start, window_height, window_width, worker_list, worker_num, worker_redraw, xmax, xmin, ymax, ymin, zoom_box;

  canvas = null;

  ctx = null;

  canvas_over = null;

  ctx_over = null;

  mem_canvas = null;

  mem_ctx = null;

  window_width = null;

  window_height = null;

  jobs = [];

  jobs_complete = 0;

  worker_list = [];

  worker_num = 8;

  worker_redraw = null;

  is_running = false;

  xmin = null;

  xmax = null;

  ymin = null;

  ymax = null;

  dx = null;

  dy = null;

  img_data = [];

  get_color = null;

  color_custom_table = null;

  maxrad = 16;

  maxtry = 64;

  time_start = null;

  time_end = null;

  mouse_x = 0;

  mouse_y = 0;

  zoom_box = null;

  move_box = null;

  settype = 0;

  defo = function() {
    xmin = -2.15;
    xmax = 1.35;
    ymin = -1.2;
    ymax = 1.2;
    maxtry = 64;
    $("#color_selector").get(0).selectedIndex = 0;
    return $("#set_selector").get(0).selectedIndex = 0;
  };

  crop = function() {
    var cen_x, cen_y, new_xlen, new_ylen, ratio, win_ratio, _ref, _ref1;
    if (ymax < ymin) {
      _ref = [ymin, ymax], ymax = _ref[0], ymin = _ref[1];
    }
    if (xmax < xmin) {
      _ref1 = [xmin, xmax], xmax = _ref1[0], xmin = _ref1[1];
    }
    ratio = (ymax - ymin) / (xmax - xmin);
    win_ratio = window_height / window_width;
    if (ratio === win_ratio) {

    } else if (ratio > win_ratio) {
      new_xlen = (ymax - ymin) / win_ratio;
      cen_x = (xmax + xmin) / 2;
      xmin = cen_x - new_xlen / 2;
      xmax = cen_x + new_xlen / 2;
    } else if (ratio < win_ratio) {
      new_ylen = (xmax - xmin) * win_ratio;
      cen_y = (ymax + ymin) / 2;
      ymin = cen_y - new_ylen / 2;
      ymax = cen_y + new_ylen / 2;
    }
    dx = (xmax - xmin) / window_width;
    dy = (ymax - ymin) / window_height;
    $("#xmax").val(xmax);
    $("#xmin").val(xmin);
    $("#ymax").val(ymax);
    $("#ymin").val(ymin);
    return null;
  };

  callback = function(msg) {
    var color, i, img, j, offset, worker;
    if (!is_running) {
      return null;
    }
    worker = msg.currentTarget;
    if (jobs.length > 0) {
      j = jobs.pop();
      worker.postMessage(j);
    }
    jobs_complete++;
    img = ctx.createImageData(window_width, 1);
    offset = 0;
    i = 0;
    while (i < window_width) {
      color = get_color(msg.data.res[i]);
      img.data[offset++] = color[0];
      img.data[offset++] = color[1];
      img.data[offset++] = color[2];
      img.data[offset++] = 255;
      i++;
    }
    img_data[msg.data.canvas_y] = msg.data.res;
    ctx.putImageData(img, 0, msg.data.canvas_y);
    if (jobs_complete === window_height) {
      is_running = false;
      time_end = (new Date).getTime();
    }
    return null;
  };

  callback_redraw = function(hoge) {
    var color, img, offset, x, y;
    y = 0;
    while (y < window_height) {
      x = 0;
      offset = 0;
      img = ctx.createImageData(window_width, window_height);
      while (x < window_width) {
        color = get_color(img_data[y][x]);
        img.data[offset++] = color[0];
        img.data[offset++] = color[1];
        img.data[offset++] = color[2];
        img.data[offset++] = 255;
        x++;
      }
      ctx.putImageData(img, 0, y);
      y++;
    }
    return null;
  };

  color_grayscale = function(data) {
    var c, n, ti, tr;
    n = data[0];
    tr = data[1];
    ti = data[2];
    if (n === maxtry) {
      return [0, 0, 0];
    }
    c = Math.floor(256 * n / maxtry);
    return [c, c, c];
  };

  color_grayscale_inv = function(data) {
    var c, n, r, ti, tr;
    n = data[0];
    tr = data[1];
    ti = data[2];
    if (n === maxtry) {
      return [0, 0, 0];
    }
    r = n / maxtry;
    c = Math.floor(256 - 256 * r - 9 * r * r);
    return [c, c, c];
  };

  color_hsv = function(data) {
    var n, ti, tr;
    n = data[0];
    tr = data[1];
    ti = data[2];
    if (n === maxtry) {
      return [0, 0, 0];
    }
    return hsv_to_rgb(360.0 * n / maxtry, 1, 1);
  };

  color_init_custom = function() {
    var i, offset, pallet, width;
    i = 0;
    width = colorpallet_gradiate.width;
    pallet = colorpallet_gradiate_ctx.getImageData(0, 0, width, 1);
    offset = 0;
    color_custom_table = [];
    while (i < width) {
      color_custom_table[i] = [];
      color_custom_table[i][0] = pallet.data[offset++];
      color_custom_table[i][1] = pallet.data[offset++];
      color_custom_table[i][2] = pallet.data[offset++];
      i++;
      offset++;
    }
    return null;
  };

  color_custom = function(data) {
    var width, x;
    width = colorpallet_gradiate.width;
    if (data[0] === maxtry) {
      x = width - 1;
    } else {
      x = parseInt(width * data[0] / maxtry);
    }
    return color_custom_table[x];
  };

  gen_workers = function() {
    var i, len;
    len = worker_list.length;
    i = 0;
    while (i < len) {
      worker_list[i].terminate();
      i++;
    }
    i = 0;
    while (i < worker_num) {
      worker_list[i] = new Worker("js/worker.js");
      worker_list[i].worker_id = i;
      i++;
    }
    return null;
  };

  gen_jobs = function() {
    var i;
    if (is_running) {
      stop();
    }
    i = 0;
    jobs_complete = 0;
    while (i < window_height) {
      jobs[i] = {
        canvas_y: window_height - 1 - i,
        y: ymin + dy * i,
        xmin: xmin,
        dx: dx,
        width: window_width,
        maxrad: maxrad,
        maxtry: maxtry,
        settype: settype
      };
      i++;
    }
    return null;
  };

  start_jobs = function() {
    var i, j;
    time_start = (new Date).getTime();
    is_running = true;
    i = 0;
    while (i < worker_list.length) {
      j = jobs.pop();
      j.worker_id = i;
      worker_list[i].postMessage(j);
      worker_list[i].onmessage = callback;
      i++;
    }
    return null;
  };

  stop = function() {
    is_running = false;
    return null;
  };

  start = function() {
    initialize();
    do_color();
    do_set();
    crop();
    reflesh();
    gen_jobs();
    gen_workers();
    start_jobs();
    return null;
  };

  reflesh = function() {
    message();
    setTimeout(reflesh, 100);
    return null;
  };

  initialize = function() {
    canvas = $('#canvas').get(0);
    canvas_over = $('#canvas_over').get(0);
    window_height = window.innerHeight;
    window_width = window.innerWidth;
    canvas.width = window_width;
    canvas.height = window_height;
    canvas_over.width = window_width;
    canvas_over.height = window_height;
    ctx = canvas.getContext("2d");
    ctx_over = canvas_over.getContext("2d");
    worker_redraw = new Worker("js/worker.js");
    worker_redraw.onmessage = callback_redraw;
    $("#maxiter").val(maxtry);
    $("#worker").val(worker_num);
    return img_data = [];
  };

  message = function() {
    var dt, float, percent;
    float = function(z) {
      return parseInt(z * 100) / 100;
    };
    if (is_running) {
      $("#status").html("status: running <span class='glyphicon glyphicon-refresh' />");
      dt = ((new Date).getTime() - time_start) / 1000;
      $("#time").text("time:" + dt.toFixed(1) + "s");
    } else {
      $("#status").html("status: finished <span class='glyphicon glyphicon-ok' />");
    }
    percent = 100 * jobs_complete / window_height;
    $("#progress-bar").css({
      width: percent + "%"
    });
    $("#mouse").text("mouse(" + mouse_x + "," + mouse_y + ")  (x,y)=(" + float(mouse_x * dx + xmin) + "," + float(-mouse_y * dy + ymax) + ")");
    return null;
  };

  do_color = function() {
    var color_scheme, flag_redraw;
    flag_redraw = false;
    color_scheme = $("#color_selector").get(0).selectedIndex;
    if (color_scheme === 0) {
      if (get_color !== color_grayscale) {
        $("body").css({
          "background": "#000"
        });
        get_color = color_grayscale;
        flag_redraw = true;
      }
    } else if (color_scheme === 1) {
      if (get_color !== color_grayscale_inv) {
        $("body").css({
          "background": "#FFF"
        });
        get_color = color_grayscale_inv;
        flag_redraw = true;
      }
    } else if (color_scheme === 2) {
      if (get_color !== color_hsv) {
        $("body").css({
          "background": "#F00"
        });
        get_color = color_hsv;
        flag_redraw = true;
      }
    } else if (color_scheme === 3) {
      if (get_color !== color_custom) {
        $("body").css({
          "background": "#FFF"
        });
        get_color = color_custom;
        flag_redraw = true;
      }
      color_init_custom();
      null;
    }
    if (flag_redraw) {
      return start();
    }
  };

  do_set = function() {
    var tmp_settype;
    tmp_settype = $("#set_selector").get(0).selectedIndex;
    if (settype !== tmp_settype) {
      settype = tmp_settype;
      return start();
    }
  };

  init_color = function() {
    $(".selectpicker").selectpicker();
    $("#color_selector").change(function() {
      do_color();
      return null;
    });
    get_color = color_grayscale;
    return $("body").css({
      "background": "#000"
    });
  };

  init_set = function() {
    $("#set_selector").change(function() {
      do_set();
      return null;
    });
    return settype = 0;
  };

  init_mouse = function() {
    var clear_over, stroke_over;
    clear_over = function() {
      ctx_over.lineWidth = 2;
      ctx_over.clearRect(0, 0, window_width, window_height);
      return ctx_over.strokeStyle = "#aaa";
    };
    stroke_over = function() {
      if (zoom_box !== null) {
        return ctx_over.strokeRect(zoom_box[0], zoom_box[1], zoom_box[2] - zoom_box[0], zoom_box[3] - zoom_box[1]);
      }
    };
    $("#canvas_over").mousedown(function(even) {
      var x, y;
      if (even.button === 0) {
        x = even.clientX;
        y = even.clientY;
        zoom_box = [x, y, x, y];
      } else if (even.button === 1) {
        move_box = [mouse_x, mouse_y];
        null;
      }
      return null;
    });
    $("#canvas_over").mousemove(function(even) {
      if (even.button === 0) {
        mouse_x = even.clientX;
        mouse_y = even.clientY;
        clear_over();
        if (zoom_box !== null) {
          zoom_box[2] = mouse_x;
          zoom_box[3] = mouse_y;
        }
        stroke_over();
      } else if (even.button === 1) {
        null;
      }
      return null;
    });
    $("#canvas_over").mouseup(function(even) {
      var xx, yy;
      if (zoom_box !== null) {
        zoom_box[2] = even.clientX;
        zoom_box[3] = even.clientY;
        xmax = zoom_box[2] * dx + xmin;
        xmin = zoom_box[0] * dx + xmin;
        ymin = -zoom_box[1] * dy + ymax;
        ymax = -zoom_box[3] * dy + ymax;
      }
      zoom_box = null;
      if (move_box !== null) {
        xx = (xmax - xmin) * (mouse_x - move_box[0]) / window_width;
        yy = (ymax - ymin) * (mouse_y - move_box[1]) / window_width;
        xmax -= xx;
        xmin -= xx;
        ymax += yy;
        ymin += yy;
      }
      move_box = null;
      start();
      return null;
    });
    return null;
  };

  init_buttom = function() {
    $("#reset").click(function() {
      defo();
      start();
      return null;
    });
    $("#redraw").click(function() {
      if (xmax !== parseFloat($("#xmax").val())) {
        xmax = parseFloat($("#xmax").val());
      }
      if (xmin !== parseFloat($("#xmin").val())) {
        xmin = parseFloat($("#xmin").val());
      }
      if (ymax !== parseFloat($("#ymax").val())) {
        ymax = parseFloat($("#ymax").val());
      }
      if (ymin !== parseFloat($("#ymin").val())) {
        ymin = parseFloat($("#ymin").val());
      }
      if (maxtry !== parseInt($("#maxiter").val())) {
        maxtry = parseInt($("#maxiter").val());
      }
      if (worker_num !== parseInt($("#worker").val())) {
        worker_num = parseInt($("#worker").val());
      }
      return start();
    });
    $("#png").click(function() {
      return window.location = canvas.toDataURL("image/png");
    });
    return null;
  };

  init_slidebar = function() {
    return $("#sidebarswitch").click(function() {
      $("#sidebar").toggleClass("sidebar_hide", 500);
      $("#sidebar-yaji").toggleClass("glyphicon-chevron-right");
      return $("#sidebar-yaji").toggleClass("glyphicon-chevron-left");
    });
  };

  $(document).ready(function() {
    defo();
    init_color();
    init_set();
    init_buttom();
    init_mouse();
    init_slidebar();
    colorpallet_init();
    start();
    return null;
  });

  hsv_to_rgb = function(h, s, v) {
    var c, hp, m, rgb, x;
    h = h % 360;
    if (v > 1.0) {
      v = 1.0;
    }
    hp = h / 60.0;
    c = v * s;
    x = c * (1 - Math.abs((hp % 2) - 1));
    rgb = [0, 0, 0];
    if (hp < 1) {
      rgb = [c, x, 0];
    } else if (hp < 2) {
      rgb = [x, c, 0];
    } else if (hp < 3) {
      rgb = [0, c, x];
    } else if (hp < 4) {
      rgb = [0, x, c];
    } else if (hp < 5) {
      rgb = [x, 0, c];
    } else if (hp < 6) {
      rgb = [c, 0, x];
    }
    m = v - c;
    rgb[0] += m;
    rgb[1] += m;
    rgb[2] += m;
    rgb[0] *= 255;
    rgb[1] *= 255;
    rgb[2] *= 255;
    return rgb;
  };

  rgb_to_hsv = function(r, g, b) {
    var h, max, min, s, v;
    if (r > 1 || g > 1 || b > 1) {
      r /= 255;
      g /= 255;
      b /= 255;
    }
    max = Math.max(r, g, b);
    min = Math.min(r, g, b);
    h = 0;
    s = 0;
    v = 0;
    if (max === min) {
      h = 0;
    } else if (max === r) {
      h = 60 * (g - b) / (max - min) + 0;
    } else if (max === g) {
      h = 60 * (b - r) / (max - min) + 120;
    } else if (max === b) {
      h = 60 * (r - g) / (max - min) + 240;
    }
    h %= 360;
    if (max === 0) {
      s = 0;
    } else {
      s = (max - min) / max;
    }
    v = max;
    return [h, s, v];
  };

  colorpallet_circle = null;

  colorpallet_triangle = null;

  colorpallet_point = null;

  colorpallet_circle_ctx = null;

  colorpallet_triangle_ctx = null;

  colorpallet_point_ctx = null;

  colorpallet_ctx = null;

  colorpallet_r = 100;

  colorpallet_h = 0;

  colorpallet_s = 0;

  colorpallet_v = 0;

  colorpallet_mouse = null;

  colorpallet_mouse_mode = null;

  colorpallet_gradiate = null;

  colorpallet_gradiate_ctx = null;

  colorpallet_gradiate_data = null;

  colorpallet_gradiate_selected = null;

  colorpallet_gradiate_editing = false;

  colorpallet_draw_triangle = function() {
    var c, fr, grad1, grad2, h, r, rad, s1, s2, x1, x2, x3, y1, y2, y3;
    h = Math.PI * colorpallet_h / 180;
    r = colorpallet_r;
    colorpallet_triangle_ctx.save();
    colorpallet_triangle_ctx.translate(r, r);
    colorpallet_triangle_ctx.rotate(h);
    colorpallet_triangle_ctx.translate(-r, -r);
    colorpallet_triangle_ctx.clearRect(0, 0, colorpallet_r * 2, colorpallet_r * 2);
    rad = 0;
    x1 = Math.cos(rad * 2) * r * 0.8 + r;
    y1 = Math.sin(rad * 2) * r * 0.8 + r;
    rad += Math.PI * 1 / 3;
    x2 = Math.cos(rad * 2) * r * 0.8 + r;
    y2 = Math.sin(rad * 2) * r * 0.8 + r;
    rad += Math.PI * 1 / 3;
    x3 = Math.cos(rad * 2) * r * 0.8 + r;
    y3 = Math.sin(rad * 2) * r * 0.8 + r;
    colorpallet_triangle_ctx.beginPath();
    colorpallet_triangle_ctx.moveTo(x1, y1);
    colorpallet_triangle_ctx.lineTo(x2, y2);
    colorpallet_triangle_ctx.lineTo(x3, y3);
    colorpallet_triangle_ctx.closePath();
    colorpallet_triangle_ctx.clip();
    colorpallet_triangle_ctx.fillStyle = "#FFF";
    colorpallet_triangle_ctx.fillRect(0, 0, r * 2, r * 2);
    grad1 = colorpallet_triangle_ctx.createLinearGradient(0.6 * r, r, 1.8 * r, r);
    c = hsv_to_rgb(colorpallet_h, 1, 1);
    s1 = "rgba(" + parseInt(c[0]) + "," + parseInt(c[1]) + "," + parseInt(c[2]) + "," + 1 + ")";
    s2 = "rgba(" + parseInt(c[0]) + "," + parseInt(c[1]) + "," + parseInt(c[2]) + "," + 0 + ")";
    grad1.addColorStop(0, s2);
    grad1.addColorStop(1, s1);
    colorpallet_triangle_ctx.fillStyle = grad1;
    colorpallet_triangle_ctx.fillRect(0, 0, r * 2, r * 2);
    fr = 0.8 * r;
    grad2 = colorpallet_triangle_ctx.createLinearGradient(r - fr / 2, r - fr * Math.sqrt(3) / 2, r + fr / 4, r + fr * Math.sqrt(3) / 4);
    grad2.addColorStop(0, "rgba(0,0,0,1)");
    grad2.addColorStop(1, "rgba(0,0,0,0)");
    colorpallet_triangle_ctx.fillStyle = grad2;
    colorpallet_triangle_ctx.fillRect(0, 0, r * 2, r * 2);
    return colorpallet_triangle_ctx.restore();
  };

  colorpallet_init_circle = function() {
    var c, f, fx, fy, img, offset, r, rad, x, y;
    y = 0;
    f = function(i) {
      return i - colorpallet_r;
    };
    offset = 0;
    img = colorpallet_circle_ctx.createImageData(2 * colorpallet_r, 2 * colorpallet_r);
    while (y < colorpallet_r * 2) {
      x = 0;
      while (x < colorpallet_r * 2) {
        fx = f(x);
        fy = f(y);
        r = (fx * fx + fy * fy) / (colorpallet_r * colorpallet_r);
        if (0.64 < r && r < 1) {
          rad = -180 * Math.atan2(fx, fy) / Math.PI + 90;
          if (rad < 0) {
            rad += 360;
          }
          c = hsv_to_rgb(rad, 1, 1);
          img.data[offset++] = c[0];
          img.data[offset++] = c[1];
          img.data[offset++] = c[2];
          img.data[offset++] = 255;
        } else {
          offset += 4;
        }
        x++;
      }
      y++;
    }
    colorpallet_circle_ctx.putImageData(img, 0, 0);
    return null;
  };

  colorpallet_draw_point = function() {
    var h, r;
    h = Math.PI * colorpallet_h / 180;
    r = colorpallet_r;
    colorpallet_point_ctx.clearRect(0, 0, colorpallet_r * 2, colorpallet_r * 2);
    colorpallet_point_ctx.save();
    colorpallet_point_ctx.translate(r, r);
    colorpallet_point_ctx.rotate(h);
    colorpallet_point_ctx.translate(-r, -r);
    colorpallet_point_ctx.strokeStyle = "#fff";
    colorpallet_point_ctx.lineWidth = 2;
    colorpallet_point_ctx.beginPath();
    colorpallet_point_ctx.moveTo(1.8 * r, r);
    colorpallet_point_ctx.lineTo(2 * r, r);
    colorpallet_point_ctx.stroke();
    return colorpallet_point_ctx.restore();
  };

  colorpallet_click = function(even) {
    var color, f, fx, fy, hsv, r, rad, rect, x, y;
    rect = even.target.getBoundingClientRect();
    x = even.clientX - rect.left;
    y = even.clientY - rect.top;
    f = function(i) {
      return i - colorpallet_r;
    };
    fx = f(x);
    fy = f(y);
    r = (fx * fx + fy * fy) / (colorpallet_r * colorpallet_r);
    colorpallet_mouse = [x, y];
    rad = Math.atan2(fx, fy);
    if (0.64 < r && r < 1 && (colorpallet_mouse_mode === "circle" || colorpallet_mouse_mode === null)) {
      colorpallet_mouse_mode = "circle";
      rad = 180 * rad / Math.PI - 90;
      if (rad < 0) {
        rad += 360;
      }
      colorpallet_h = 360 - rad;
    } else {
      color = colorpallet_triangle_ctx.getImageData(x, y, 1, 1).data;
      if (color[3] !== 0 && (colorpallet_mouse_mode === "triangle" || colorpallet_mouse_mode === null)) {
        colorpallet_mouse_mode = "triangle";
        hsv = rgb_to_hsv(color[0], color[1], color[2]);
        colorpallet_s = hsv[1];
        colorpallet_v = hsv[2];
      }
    }
    colorpallet_draw_triangle();
    colorpallet_draw_point();
    return colorpallet_message();
  };

  colorpallet_dbclick = function(e) {
    var c, rad, rect, width, x;
    rect = e.target.getBoundingClientRect();
    x = e.clientX - rect.left;
    width = colorpallet_gradiate.width;
    rad = x / width;
    c = colorpallet_gradiate_ctx.getImageData(x, 0, 1, 1).data;
    console.log(c);
    colorpallet_gradiate_data.push([rad, c[0], c[1], c[2]]);
    return null;
  };

  colorpallet_init_click = function() {
    var obj;
    obj = colorpallet_point;
    obj.onmousedown = function(even) {
      colorpallet_click(even);
      return null;
    };
    obj.onmousemove = function(even) {
      if (colorpallet_mouse !== null) {
        colorpallet_click(even);
      }
      return null;
    };
    obj.onmouseup = function(even) {
      colorpallet_click(even);
      colorpallet_mouse = null;
      colorpallet_mouse_mode = null;
      return null;
    };
    colorpallet_gradiate.ondblclick = function(even) {
      colorpallet_dbclick(even);
      return null;
    };
    $("#colorpallet-delete").get(0).onclick = function(e) {
      var idx;
      idx = colorpallet_gradiate_selected;
      console.log(idx);
      if (0 <= idx && idx < colorpallet_gradiate_data.length && colorpallet_gradiate_data.length > 2) {
        colorpallet_gradiate_data.splice(idx, 1);
        colorpallet_gradiate_selected = null;
        colorpallet_draw_gradiate();
      }
      return null;
    };
    return $("#colorpallet-ok").get(0).onclick = function(e) {
      var data, rgb;
      if ((0 <= colorpallet_gradiate_selected && colorpallet_gradiate_selected < colorpallet_gradiate_data.length)) {
        rgb = hsv_to_rgb(colorpallet_h, colorpallet_s, colorpallet_v);
        data = colorpallet_gradiate_data[colorpallet_gradiate_selected];
        data[1] = rgb[0];
        data[2] = rgb[1];
        data[3] = rgb[2];
        colorpallet_gradiate_data[colorpallet_gradiate_selected] = data;
        colorpallet_draw_gradiate();
      }
      return null;
    };
  };

  colorpallet_draw_gradiate = function() {
    var d, grad, height, i, len, offset, rgb, width, x;
    width = colorpallet_gradiate.width;
    height = colorpallet_gradiate.height;
    colorpallet_gradiate_ctx.clearRect(0, 0, width, height);
    grad = colorpallet_gradiate_ctx.createLinearGradient(0, 0, width, 0);
    i = 0;
    len = colorpallet_gradiate_data.length;
    while (i < len) {
      d = colorpallet_gradiate_data[i];
      rgb = "rgb(" + Math.floor(d[1]) + "," + Math.floor(d[2]) + "," + Math.floor(d[3]) + ")";
      grad.addColorStop(d[0], rgb);
      i++;
    }
    colorpallet_gradiate_ctx.fillStyle = grad;
    colorpallet_gradiate_ctx.fillRect(0, 0, width, height - 10);
    i = 0;
    while (i < len) {
      if (i === colorpallet_gradiate_selected) {
        offset = 5;
      } else {
        offset = 0;
      }
      colorpallet_gradiate_ctx.strokeStyle = "#FFF";
      d = colorpallet_gradiate_data[i];
      x = d[0] * width;
      colorpallet_gradiate_ctx.lineWidth = 2;
      colorpallet_gradiate_ctx.beginPath();
      colorpallet_gradiate_ctx.moveTo(x, 10);
      colorpallet_gradiate_ctx.lineTo(x, height - 5 + offset);
      colorpallet_gradiate_ctx.stroke();
      colorpallet_gradiate_ctx.fillStyle = "#fff";
      colorpallet_gradiate_ctx.beginPath();
      colorpallet_gradiate_ctx.moveTo(x - 3, height - 5 + offset);
      colorpallet_gradiate_ctx.lineTo(x, height - 10 + offset);
      colorpallet_gradiate_ctx.lineTo(x + 3, height - 5 + offset);
      colorpallet_gradiate_ctx.lineTo(x - 3, height - 5 + offset);
      colorpallet_gradiate_ctx.fill();
      i++;
    }
    return null;
  };

  colorpallet_init_gradiate = function() {
    colorpallet_gradiate_data = [];
    colorpallet_gradiate_data[0] = [0, 0, 0, 0];
    colorpallet_gradiate_data[1] = [1, 255, 255, 0];
    colorpallet_gradiate_data[2] = [0.2, 255, 0, 0];
    colorpallet_gradiate_data[3] = [0.3, 0, 255, 0];
    colorpallet_gradiate_data[4] = [0.5, 0, 0, 255];
    colorpallet_draw_gradiate();
    return null;
  };

  colorpallet_gradiate_click = function(e) {
    var hsv, rgb;
    rgb = colorpallet_gradiate_data[colorpallet_gradiate_selected];
    hsv = rgb_to_hsv(rgb[1], rgb[2], rgb[3]);
    colorpallet_h = hsv[0];
    colorpallet_s = hsv[1];
    colorpallet_v = hsv[2];
    colorpallet_draw_triangle();
    colorpallet_draw_point();
    colorpallet_message();
    return null;
  };

  colorpallet_gradiate_drag = function(e) {
    var mx, rat, rect;
    rect = e.target.getBoundingClientRect();
    mx = e.clientX - rect.left;
    rat = mx / colorpallet_gradiate.width;
    if (colorpallet_gradiate_selected !== null && colorpallet_gradiate_selected < colorpallet_gradiate_data.length) {
      colorpallet_gradiate_data[colorpallet_gradiate_selected][0] = rat;
    }
    colorpallet_draw_gradiate();
    return null;
  };

  colorpallet_gradiate_on = function(e) {
    var i, len, mx, rect, width, x;
    rect = e.target.getBoundingClientRect();
    mx = e.clientX - rect.left;
    i = 0;
    len = colorpallet_gradiate_data.length;
    width = colorpallet_gradiate.width;
    while (i < len) {
      x = colorpallet_gradiate_data[i][0] * width;
      if (x - 4 < mx && mx < x + 4) {
        colorpallet_gradiate_selected = i;
        colorpallet_gradiate.style.cursor = "pointer";
        break;
      } else {
        if (!colorpallet_gradiate_editing) {
          colorpallet_gradiate_selected = null;
        }
        colorpallet_gradiate.style.cursor = "default";
      }
      i++;
    }
    colorpallet_draw_gradiate();
    return null;
  };

  colorpallet_gradiate_init_click = function() {
    var is_on, obj;
    obj = colorpallet_gradiate;
    is_on = false;
    obj.onmousedown = function(even) {
      is_on = true;
      colorpallet_gradiate_drag(even);
      return null;
    };
    obj.onmouseup = function(even) {
      is_on = false;
      colorpallet_draw_gradiate();
      return null;
    };
    obj.onclick = function(even) {
      colorpallet_gradiate_editing = true;
      return colorpallet_gradiate_click(even);
    };
    return obj.onmousemove = function(even) {
      if (is_on) {
        colorpallet_gradiate_drag(even);
      } else {
        colorpallet_gradiate_on(even);
      }
      return null;
    };
  };

  colorpallet_init = function() {
    colorpallet_triangle = $("#colorpallet-triangle").get(0);
    colorpallet_circle = $("#colorpallet-circle").get(0);
    colorpallet_point = $("#colorpallet-point").get(0);
    colorpallet_circle.width = colorpallet_r * 2;
    colorpallet_circle.height = colorpallet_r * 2;
    colorpallet_point.width = colorpallet_r * 2;
    colorpallet_point.height = colorpallet_r * 2;
    colorpallet_triangle.width = colorpallet_r * 2;
    colorpallet_triangle.height = colorpallet_r * 2;
    colorpallet_circle_ctx = colorpallet_circle.getContext("2d");
    colorpallet_point_ctx = colorpallet_point.getContext("2d");
    colorpallet_triangle_ctx = colorpallet_triangle.getContext("2d");
    colorpallet_gradiate = $("#colorpallet-gradiate").get(0);
    colorpallet_gradiate_ctx = colorpallet_gradiate.getContext("2d");
    colorpallet_gradiate.width = 280;
    colorpallet_gradiate.height = 30;
    colorpallet_init_circle();
    colorpallet_init_click();
    colorpallet_init_gradiate();
    colorpallet_gradiate_init_click();
    colorpallet_draw_triangle();
    colorpallet_draw_point();
    colorpallet_message();
    return null;
  };

  colorpallet_message = function() {
    var c, i;
    $("#colorpallet-h").val(colorpallet_h);
    $("#colorpallet-s").val(colorpallet_s);
    $("#colorpallet-v").val(colorpallet_v);
    c = hsv_to_rgb(colorpallet_h, colorpallet_s, colorpallet_v);
    c[0] = Math.floor(c[0]).toString(16);
    c[1] = Math.floor(c[1]).toString(16);
    c[2] = Math.floor(c[2]).toString(16);
    i = 0;
    while (i < 3) {
      if (c[i].length === 1) {
        c[i] = '0' + c[i];
      }
      i++;
    }
    return $("#colorpallet-rgb").val("#" + c[0] + c[1] + c[2]);
  };

}).call(this);
